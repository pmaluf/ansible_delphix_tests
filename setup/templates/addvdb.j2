#!/bin/bash

API_MAJOR="{{ API_MAJOR }}"
API_MINOR="{{ API_MINOR }}"
API_MICRO="{{ API_MICRO }}"
DELPHIX_ENGINE_IP="{{ DELPHIX_ENGINE_IP }}"
DELPHIX_ADMIN_USER="{{ DELPHIX_ADMIN_USER }}"
DELPHIX_ADMIN_PASSWORD="{{ DELPHIX_ADMIN_PASSWORD }}"

DELPHIX_VDB_NAME="{{ DELPHIX_VDB_NAME }}"
DELPHIX_VDB_PORT="{{ DELPHIX_VDB_PORT }}"
DELPHIX_TGT_ENV_NAME="{{ DELPHIX_TARGET_ENV_NAME }}"
DELPHIX_TARGET_HOST_NAME="{{ DELPHIX_TARGET_HOST_NAME }}"
DELPHIX_TGT_ENVUSER_NAME="{{ DELPHIX_TARGET_ENVUSER_NAME }}"
DELPHIX_GROUP_NAME="{{ DELPHIX_VDB_GROUP_NAME }}"
DELPHIX_VDB_REPO_NAME="{{ DELPHIX_VDB_REPO_NAME }}"
DELPHIX_SRC_CONTAINER_NAME="{{ DELPHIX_SRC_CONTAINER_NAME }}"
DELPHIX_VDB_MOUNTBASE="{{ DELPHIX_VDB_MOUNTBASE }}"
DELPHIX_VDB_MOUNTPOINT=$DELPHIX_VDB_MOUNTBASE/$DELPHIX_VDB_NAME

#if [[ $1 = 'y' ]]; then
#	/home/delphix/DMT/toolkit_MONGO/delete_appdata_dsource_or_vdb.sh $DELPHIX_VDB_NAME
#fi

curl -s -X POST -k --data @- http://$DELPHIX_ENGINE_IP/resources/json/delphix/session \
	-c ~/cookies.txt -H "Content-Type: application/json" <<EOF
{
	"type": "APISession",
	"version": {
		"type": "APIVersion",
		"major": $API_MAJOR,
		"minor": $API_MINOR,
		"micro": $API_MICRO
	}
}
EOF

echo
curl -s -X POST -k --data @- http://$DELPHIX_ENGINE_IP/resources/json/delphix/login \
	-b ~/cookies.txt -c ~/cookies.txt -H "Content-Type: application/json" <<EOF
{
	"type": "LoginRequest",
	"username": "$DELPHIX_ADMIN_USER",
	"password": "$DELPHIX_ADMIN_PASSWORD"
}
EOF
echo

# Get group
DELPHIX_GROUP_REF=`curl -s -X GET http://$DELPHIX_ENGINE_IP/resources/json/delphix/group -b ~/cookies.txt -H "Content-Type: application/json"| \
	jq -r --arg DELPHIX_GROUP_NAME "$DELPHIX_GROUP_NAME" '.result[]|select(.name==$DELPHIX_GROUP_NAME)|.reference'`

# Get environment
DELPHIX_TGT_ENV_REF=`curl -s -X GET http://$DELPHIX_ENGINE_IP/resources/json/delphix/environment -b ~/cookies.txt -H "Content-Type: application/json"| \
	jq -r --arg DELPHIX_TGT_ENV_NAME "$DELPHIX_TGT_ENV_NAME" '.result[]|select(.name==$DELPHIX_TGT_ENV_NAME)|.reference'`

# Get env user reference
DELPHIX_TGT_ENVUSER_REF=`curl -s -X GET http://$DELPHIX_ENGINE_IP/resources/json/delphix/environment/user -b ~/cookies.txt -H "Content-Type: application/json"| \
	jq -r --arg DELPHIX_TGT_ENVUSER_NAME "$DELPHIX_TGT_ENVUSER_NAME" --arg DELPHIX_TGT_ENV_REF $DELPHIX_TGT_ENV_REF '.result[]|select((.name==$DELPHIX_TGT_ENVUSER_NAME) and (.environment==$DELPHIX_TGT_ENV_REF))|.reference'`

# Get Repository Reference
DELPHIX_VDB_REPO_REF=`curl -s -X GET http://$DELPHIX_ENGINE_IP/resources/json/delphix/repository -b ~/cookies.txt -H "Content-Type: application/json"| \
	jq -r --arg DELPHIX_VDB_REPO_NAME "$DELPHIX_VDB_REPO_NAME" --arg DELPHIX_TGT_ENV_REF "$DELPHIX_TGT_ENV_REF" '.result[]|select((.type=="AppDataRepository") and (.name==$DELPHIX_VDB_REPO_NAME) and (.environment==$DELPHIX_TGT_ENV_REF))|.reference'`

# Get Source Container Reference
DELPHIX_SRC_CONTAINER_REF=`curl -s -X GET http://$DELPHIX_ENGINE_IP/resources/json/delphix/database -b ~/cookies.txt -H "Content-Type: application/json"| \
	jq -r --arg DELPHIX_SRC_CONTAINER_NAME "$DELPHIX_SRC_CONTAINER_NAME" '.result[]|select(.type=="AppDataContainer" and .name==$DELPHIX_SRC_CONTAINER_NAME)|.reference'`

curl -s -X POST -k --data @- http://$DELPHIX_ENGINE_IP/resources/json/delphix/database/provision -b ~/cookies.txt -H "Content-Type: application/json" <<EOF
{
	"type":"AppDataProvisionParameters",
	"container": {
		"type": "AppDataContainer",
		"name": "$DELPHIX_VDB_NAME",
		"group": "$DELPHIX_GROUP_REF",
		"sourcingPolicy": {
			"type": "SourcingPolicy",
			"logsyncEnabled": false
		}
	},
	"source":{
		"operations":{
			"configureClone":[],
			"postRefresh":[],
			"postRollback":[],
			"postSnapshot":[],
			"preRefresh":[],
			"preRollback":[],
			"preSnapshot":[],
			"preStart":[],
			"postStart":[],
			"preStop":[],
			"postStop":[],
			"type":"VirtualSourceOperations"
		},
		"parameters": {{ DELPHIX_VDB_SOURCE_PARAMETERS | to_nice_json  }},
		"additionalMountPoints":[],
		"allowAutoVDBRestartOnHostReboot":false,
		"name":"$DELPHIX_VDB_NAME",
		"type":"AppDataVirtualSource"
	},
	"sourceConfig": {
		"type": "AppDataDirectSourceConfig",
		"name": "$DELPHIX_VDB_NAME",
		"repository": "$DELPHIX_VDB_REPO_REF",
        "parameters": {{ DELPHIX_VDB_SOURCECONFIG_PARAMETERS | to_nice_json }}
	},
	"timeflowPointParameters": {
		"type": "TimeflowPointSemantic",
		"container": "$DELPHIX_SRC_CONTAINER_REF",
		"location": "LATEST_POINT"
	}
}
EOF
echo
